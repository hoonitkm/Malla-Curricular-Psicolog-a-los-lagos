document.addEventListener('DOMContentLoaded', () => {

    // 1. Estructura de la malla curricular con semestres y ramos
    const malla = {
        'SEMESTRE I': [
            'Taller de An√°lisis de la Realidad Regional',
            'Historia del Pensamiento Psicol√≥gico',
            'Bases Sociales del Comportamiento',
            'Bases Biol√≥gicas del Comportamiento',
            'Comunicaci√≥n I',
            'Electivo'
        ],
        'SEMESTRE II': [
            'Psicolog√≠a Social I',
            'Ciclo Vital I',
            'Teor√≠a Psicoanal√≠tica',
            'Teor√≠a Humanista',
            'Taller de Comunicaci√≥n Interpersonal',
            'Ciudadan√≠a I',
            'Electivo'
        ],
        'SEMESTRE III': [
            'Psicolog√≠a Social II',
            'Ciclo Vital II',
            'Teor√≠a Cognitiva',
            'Teor√≠a Sist√©mica',
            'Epistemolog√≠a',
            'Ingl√©s I',
            'Electivo'
        ],
        'SEMESTRE IV': [
            'Taller de Integraci√≥n',
            'Neuropsicolog√≠a',
            'Psicopatolog√≠a Infanto - Juvenil',
            'Metodolog√≠a de la Investigaci√≥n I',
            'Ingl√©s II',
            'Electivo'
        ],
        'SEMESTRE V': [
            'Psicolog√≠a Organizacional',
            'Psicolog√≠a Comunitaria',
            'Psicopatolog√≠a de Adultos',
            'Metodolog√≠a de la Investigaci√≥n II',
            'Ingl√©s III'
        ],
        'SEMESTRE VI': [
            'Psicolog√≠a Cl√≠nica',
            'Psicolog√≠a Educacional',
            'Evaluaci√≥n Neurocognitiva',
            'Metodolog√≠a de la Investigaci√≥n III',
            'Ingl√©s IV'
        ],
        'SEMESTRE VII': [
            'Seminario de Licenciatura I',
            'Evaluaci√≥n Personalidad',
            'Intervenci√≥n Psicoeducativa',
            'Intervenci√≥n Organizacional'
        ],
        'SEMESTRE VIII': [
            'Seminario de Licenciatura II',
            'Taller de Psicodiagn√≥stico',
            'Intervenci√≥n Cl√≠nica',
            'Intervenci√≥n Comunitaria'
        ],
        'SEMESTRE IX': [
            'Pr√°ctica Profesional I',
            'Taller de √âtica Profesional'
        ],
        'SEMESTRE X': [
            'Pr√°ctica Profesional II',
            'Examen de T√≠tulo'
        ]
    };

    // 2. Definici√≥n de los requisitos para cada ramo
    const requisitos = {
        'Psicolog√≠a Social I': ['Bases Sociales del Comportamiento'],
        'Psicolog√≠a Social II': ['Psicolog√≠a Social I'],
        'Ciclo Vital II': ['Ciclo Vital I'],
        'Taller de Integraci√≥n': ['Teor√≠a Psicoanal√≠tica', 'Teor√≠a Humanista', 'Teor√≠a Cognitiva', 'Teor√≠a Sist√©mica'],
        'Neuropsicolog√≠a': ['Bases Biol√≥gicas del Comportamiento'],
        'Psicopatolog√≠a Infanto - Juvenil': ['Ciclo Vital I'],
        'Metodolog√≠a de la Investigaci√≥n I': ['Epistemolog√≠a'],
        'Ingl√©s II': ['Ingl√©s I'],
        'Psicolog√≠a Comunitaria': ['Psicolog√≠a Social II'],
        'Metodolog√≠a de la Investigaci√≥n II': ['Metodolog√≠a de la Investigaci√≥n I'],
        'Ingl√©s III': ['Ingl√©s II'],
        'Psicolog√≠a Cl√≠nica': ['Psicopatolog√≠a de Adultos'],
        'Psicolog√≠a Educacional': ['Ciclo Vital I'],
        'Metodolog√≠a de la Investigaci√≥n III': ['Metodolog√≠a de la Investigaci√≥n II'],
        'Ingl√©s IV': ['Ingl√©s III'],
        'Seminario de Licenciatura I': ['Metodolog√≠a de la Investigaci√≥n III'],
        'Evaluaci√≥n Personalidad': ['Evaluaci√≥n Neurocognitiva'],
        'Intervenci√≥n Psicoeducativa': ['Psicolog√≠a Educacional'],
        'Intervenci√≥n Organizacional': ['Psicolog√≠a Organizacional'],
        'Seminario de Licenciatura II': ['Seminario de Licenciatura I'],
        'Taller de Psicodiagn√≥stico': ['Evaluaci√≥n Personalidad'],
        'Intervenci√≥n Cl√≠nica': ['Psicolog√≠a Cl√≠nica'],
        'Intervenci√≥n Comunitaria': ['Psicolog√≠a Comunitaria'],
        'Pr√°ctica Profesional I': ['Seminario de Licenciatura I', 'Seminario de Licenciatura II'],
        'Taller de √âtica Profesional': ['Seminario de Licenciatura I', 'Seminario de Licenciatura II'],
        'Pr√°ctica Profesional II': ['Pr√°ctica Profesional I'],
        'Examen de T√≠tulo': ['Pr√°ctica Profesional II']
    };

    // 3. Obtiene los ramos aprobados guardados en localStorage o inicializa un objeto vac√≠o
    let ramosAprobados = JSON.parse(localStorage.getItem('ramosAprobados')) || {};

    // 4. Referencia al contenedor de la malla y notificaciones en el HTML
    const gridContainer = document.querySelector('.grid-container');
    const notificationContainer = document.getElementById('notification-container');

    // 5. Funci√≥n para renderizar la malla curricular
    function renderMalla() {
        gridContainer.innerHTML = ''; // Limpia el contenido anterior
        let semestreIndex = 1;
        for (const semestre in malla) {
            const semestreDiv = document.createElement('div');
            semestreDiv.classList.add('semestre');
            semestreDiv.innerHTML = `<h3 class="semestre-title">${semestre}</h3><ul class="ramo-list"></ul>`;
            
            const ramoList = semestreDiv.querySelector('.ramo-list');
            malla[semestre].forEach(ramo => {
                const ramoLi = document.createElement('li');
                ramoLi.textContent = ramo;
                ramoLi.classList.add('ramo', `semestre-${semestreIndex}`);
                ramoLi.dataset.ramoNombre = ramo; // Almacena el nombre para f√°cil acceso

                // Agrega la clase 'aprobado' si el ramo ya fue aprobado
                if (ramosAprobados[ramo]) {
                    ramoLi.classList.add('aprobado');
                }
                
                // Agrega la clase 'bloqueado' si sus requisitos no est√°n cumplidos
                const ramoRequisitos = requisitos[ramo];
                if (ramoRequisitos) {
                    const requisitosCumplidos = ramoRequisitos.every(req => ramosAprobados[req]);
                    if (!requisitosCumplidos && !ramosAprobados[ramo]) {
                        ramoLi.classList.add('bloqueado');
                    }
                }

                ramoList.appendChild(ramoLi);
            });

            gridContainer.appendChild(semestreDiv);
            semestreIndex++;
        }
        // Agrega el evento de clic a todos los ramos
        document.querySelectorAll('.ramo').forEach(ramo => {
            ramo.addEventListener('click', handleRamoClick);
        });
    }

    // 6. Funci√≥n para manejar el evento de clic en un ramo
    function handleRamoClick(event) {
        const ramoElement = event.target;
        const ramoNombre = ramoElement.dataset.ramoNombre;

        // Si el ramo ya est√° aprobado, lo desmarca
        if (ramoElement.classList.contains('aprobado')) {
            delete ramosAprobados[ramoNombre];
            localStorage.setItem('ramosAprobados', JSON.stringify(ramosAprobados));
            renderMalla(); // Vuelve a renderizar para actualizar el estado
            return;
        }

        // Verifica si el ramo tiene requisitos
        const requisitosFaltantes = requisitos[ramoNombre]?.filter(req => !ramosAprobados[req]);

        if (requisitosFaltantes && requisitosFaltantes.length > 0) {
            // Muestra un mensaje de ramos bloqueados
            const mensaje = `Ramo bloqueado. Faltan por aprobar: ${requisitosFaltantes.join(', ')}.`;
            alert(mensaje);
        } else {
            // Si no hay requisitos pendientes, se marca como aprobado
            ramosAprobados[ramoNombre] = true;
            localStorage.setItem('ramosAprobados', JSON.stringify(ramosAprobados));
            renderMalla();
            showNotification('¬°Felicidades üåü Ÿ©(‚ó¶`Íí≥¬¥‚ó¶)€∂!');
        }
    }

    // 7. Funci√≥n para mostrar la notificaci√≥n animada
    function showNotification(message) {
        const notificationDiv = document.createElement('div');
        notificationDiv.classList.add('notification');
        notificationDiv.textContent = message;
        notificationContainer.appendChild(notificationDiv);

        setTimeout(() => {
            notificationDiv.remove();
        }, 3000);
    }
    
    // Inicia la renderizaci√≥n de la malla cuando la p√°gina carga
    renderMalla();
});
